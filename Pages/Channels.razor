@page "/channels"

@using CommunityToolkit.Maui.Storage;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using YTApi.Commons.Models;
@using YTCmtyParser.Commons.Extensions;
@using YTCmtyParser.Commons.Utils;
@using YTCmtyParser.Data;

<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="mb-2">
                <label for="iChannelName" class="form-label">YouTube 頻道名稱</label>
                <input id="iChannelName" type="text"
                       class="form-control"
                       @bind="sharedChannelName"
                       placeholder="名稱"></input>
            </div>
            <div class="mb-2">
                <label for="iChannelUrl" class="form-label">YouTube 頻道網址</label>
                <input id="iChannelUrl" type="url"
                       class="form-control"
                       @bind="sharedChannelUrl"
                       placeholder="網址"></input>
            </div>
            <div class="text-end mb-2">
                <button class="btn btn-primary mb-1"
                        @onclick="async () => await AddChannel()">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    &nbsp;YouTube 頻道
                </button>
            </div>
        </div>
    </div>
</div>
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" style="width: 20%;">#</th>
                <th scope="col" style="width: 40%;">YouTube 頻道名稱</th>
                <th scope="col">YouTube 頻道網址</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @if (sharedChannels?.Any() == true)
            {
                @foreach (ChannelData channelData in sharedChannels)
                {
                    <tr>
                        <th scope="row">
                            <button class="btn btn-outline-danger btn-sm mb-1"
                            @onclick="async () => await DeleteChannel(channelData.Name)">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                                &nbsp;刪除
                            </button>
                        </th>
                        <td>@channelData.Name</td>
                        <td style="white-space: pre-wrap; line-break: anywhere;">@channelData.Url</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <th scope="row" class="text-center" colspan="3">無資料</th>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    // 來源：https://stackoverflow.com/a/31726735
    private static Regex ChannelUrlRegex = new Regex(
        @"((http(s)?:\/\/)?)(www\.)?((youtube\.com\/)|(youtu.be\/))[\S]+",
        RegexOptions.Compiled |
        RegexOptions.IgnoreCase |
        RegexOptions.CultureInvariant);

    // 變數。
    private string? sharedChannelName = string.Empty;
    private string? sharedChannelUrl = string.Empty;
    private List<ChannelData>? sharedChannels = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPrefs();

        await Task.CompletedTask;
    }

    /// <summary>
    /// 載入設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task LoadPrefs()
    {
        try
        {
            if (File.Exists(GlobalSet.Files.ChannelsJson))
            {
                using FileStream fileStream = File.OpenRead(GlobalSet.Files.ChannelsJson);

                sharedChannels = await JsonSerializer
                    .DeserializeAsync<List<ChannelData>>(fileStream);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 新增 YouTube 頻道
    /// </summary>
    /// <returns>Task</returns>
    private async Task AddChannel()
    {
        try
        {
            if (string.IsNullOrEmpty(sharedChannelName))
            {
                sharedChannelName = string.Empty;

                await AlertUtil.ShowToast("請輸入 YouTube 頻道名稱。");

                return;
            }
            else
            {
                if (sharedChannels?.Any(n => n.Name == sharedChannelName) == true)
                {
                    sharedChannelName = string.Empty;

                    await AlertUtil.ShowToast($"YouTube 頻道名稱 \"{sharedChannelName}\" 不可重複。");

                    return;
                }
            }

            if (!string.IsNullOrEmpty(sharedChannelUrl) &&
                !ChannelUrlRegex.IsMatch(sharedChannelUrl))
            {
                sharedChannelUrl = string.Empty;

                await AlertUtil.ShowToast("請輸入有效的 YouTube 頻道網址。");

                return;
            }

            if (sharedChannels?.Any(n => n.Url == sharedChannelUrl) == true)
            {
                string message = "YouTube 頻道網址不可重複。";

                ChannelData? channelData = sharedChannels.FirstOrDefault(n => n.Url == sharedChannelUrl);

                if (channelData != null)
                {
                    message = message.Replace("。", $"，此 YouTube 頻道網址已被 YouTube 頻道 \"{channelData.Name}\" 使用。");
                }

                sharedChannelUrl = string.Empty;

                await AlertUtil.ShowToast(message);

                return;
            }

            if (string.IsNullOrEmpty(sharedChannelName) ||
                string.IsNullOrEmpty(sharedChannelUrl))
            {
                await AlertUtil.ShowToast("請輸入 YouTube 頻道名稱或 YouTube 頻道網址。");

                return;
            }

            sharedChannels?.Add(new ChannelData()
                {
                    Name = sharedChannelName,
                    Url = sharedChannelUrl
                });

            await AlertUtil.ShowToast($"已新增 YouTube 頻道 \"{sharedChannelName}\"。")
                .ContinueWith(async task =>
                {
                    string content = sharedChannels?.ToJsonString() ?? string.Empty;

                    await SaveToFile(
                        filePath: GlobalSet.Files.ChannelsJson,
                        content: content);
                })
                .ContinueWith(task =>
                {
                    sharedChannelName = string.Empty;
                    sharedChannelUrl = string.Empty;
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 刪除 YouTube 頻道
    /// </summary>
    /// <param name="name">字串， YouTube 頻道的名稱</param>
    /// <returns>Task</returns>
    private async Task DeleteChannel(string? name)
    {
        try
        {
            bool? confirm = await AlertUtil.ShowConfirmAlert(
                "刪除 YouTube 頻道",
                "您是否要刪除此 YouTube 頻道？");

            if (confirm == false)
            {
                return;
            }

            if (string.IsNullOrEmpty(name))
            {
                await AlertUtil.ShowToast("YouTube 頻道刪除失敗，YouTube 頻道名稱不得為空。");

                return;
            }

            int? removeCount = sharedChannels?.RemoveAll(n => n.Name == name);


            if (removeCount == null || removeCount == 0)
            {
                await AlertUtil.ShowToast($"YouTube 頻道刪除失敗，找不到對應的 YouTube 頻道：{name}。");

                return;
            }

            await AlertUtil.ShowToast($"已刪除 YouTube 頻道：{name}。")
                .ContinueWith(async task =>
                {
                    if (sharedChannels?.Count > 0)
                    {
                        string content = sharedChannels?.ToJsonString() ?? string.Empty;

                        await SaveToFile(
                            filePath: GlobalSet.Files.ChannelsJson,
                            content: content);
                    }
                    else
                    {
                        if (File.Exists(GlobalSet.Files.ChannelsJson))
                        {
                            File.Delete(GlobalSet.Files.ChannelsJson);
                        }
                    }
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 儲存檔案
    /// </summary>
    /// <param name="filePath">字串，檔案路徑</param>
    /// <param name="content">字串，文字內容</param>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task SaveToFile(
        string filePath,
        string content,
        CancellationToken ct = default)
    {
        try
        {
            if (string.IsNullOrEmpty(filePath))
            {
                await AlertUtil.ShowToast($"檔案路徑不得為空。", ct);

                return;
            }

            string fileName = Path.GetFileName(filePath);

            using FileStream fileStream = File.OpenWrite(filePath);
            using StreamWriter streamWriter = new(fileStream);

            await streamWriter.WriteAsync(content);

            await AlertUtil.ShowToast($"檔案 {fileName} 已儲存至：{filePath}。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }
}