@page "/channels"

@using CommunityToolkit.Maui.Storage;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.Web;
@using YTApi.Commons.Models;
@using YTCmtyParser.Commons.Extensions;
@using YTCmtyParser.Commons.Sets;
@using YTCmtyParser.Commons.Utils;
@using YTCmtyParser.Commons;
@using YTCmtyParser.Data;
@inject NavigationManager navigationManager;

<h1>
    <i class="bi bi-youtube"></i>&nbsp;
    管理 YouTube頻道
</h1>
<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="mb-2">
                <label for="iChannelName" class="form-label">YouTube 頻道名稱</label>
                <input id="iChannelName" type="text"
                       class="form-control"
                       @bind="sharedChannelName"
                       placeholder="名稱"></input>
            </div>
            <div class="mb-2">
                <label for="iChannelUrl" class="form-label">YouTube 頻道網址</label>
                <input id="iChannelUrl" type="url"
                       class="form-control"
                       @bind="sharedChannelUrl"
                       placeholder="網址"></input>
            </div>
            <div class="text-end mb-2">
                <button class="btn btn-primary mb-1"
                        @onclick="async () => await AddChannel()">
                    <i class="bi bi-plus" aria-hidden="true"></i>
                    &nbsp;新增 YouTube 頻道
                </button>
            </div>
        </div>
    </div>
</div>
<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="row">
                <div>
                    <button class="btn btn-outline-secondary mb-1"
                            @onclick="async () => await ImportJsonFile()">
                        <i class="bi bi-upload" aria-hidden="true"></i>
                        &nbsp;
                        匯入 JSON 檔案
                    </button>
                    &nbsp;
                    <button class="btn btn-outline-secondary mb-1"
                            @onclick="async () => await ExportJsonFile()">
                        <i class="bi bi-download" aria-hidden="true"></i>
                        &nbsp;
                        匯出 JSON 檔案
                    </button>
                    &nbsp;
                    <button class="btn btn-outline-danger mb-1"
                            @onclick="async () => await DeleteChannels()">
                        <i class="bi bi-trash" aria-hidden="true"></i>
                        &nbsp;
                        刪除全部
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" style="width: 20%;">#</th>
                <th scope="col" style="width: 40%;">YouTube 頻道名稱</th>
                <th scope="col">YouTube 頻道網址</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @if (sharedChannels?.Any() == true)
            {
                @foreach (ChannelData channelData in sharedChannels)
                {
                    <tr>
                        <th scope="row">
                            <button class="btn btn-outline-secondary btn-sm mb-1"
                            @onclick="async () =>  await EditChannel(channelData.Name)">
                                <i class="bi bi-pencil" aria-hidden="true"></i>
                                &nbsp;編輯
                            </button>
                            &nbsp;
                            <button class="btn btn-outline-danger btn-sm mb-1"
                            @onclick="async () => await DeleteChannel(channelData.Name)">
                                <i class="bi bi-trash" aria-hidden="true"></i>
                                &nbsp;刪除
                            </button>
                        </th>
                        <td>@channelData.Name</td>
                        <td style="white-space: pre-wrap; line-break: anywhere;">
                            <a href="@channelData.Url" target="_blank" title="點擊以開啟頻道連結">
                                @channelData.Url
                            </a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <th scope="row" class="text-center" colspan="3">無資料</th>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    // 來源：https://stackoverflow.com/a/31726735
    private static Regex ChannelUrlRegex = new Regex(
        @"((http(s)?:\/\/)?)(www\.)?((youtube\.com\/)|(youtu.be\/))[\S]+",
        RegexOptions.Compiled |
        RegexOptions.IgnoreCase |
        RegexOptions.CultureInvariant);

    // 變數。
    private string? sharedChannelName = string.Empty;
    private string? sharedChannelUrl = string.Empty;
    private List<ChannelData>? sharedChannels = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPrefs();

        await Task.CompletedTask;
    }

    /// <summary>
    /// 載入設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task LoadPrefs()
    {
        try
        {
            if (File.Exists(FileSet.ChannelsJson))
            {
                using FileStream fileStream = File.OpenRead(FileSet.ChannelsJson);

                sharedChannels = await JsonSerializer
                    .DeserializeAsync<List<ChannelData>>(fileStream);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 新增 YouTube 頻道
    /// </summary>
    /// <returns>Task</returns>
    private async Task AddChannel()
    {
        try
        {
            if (string.IsNullOrEmpty(sharedChannelName))
            {
                sharedChannelName = string.Empty;

                await AlertUtil.ShowToast("請輸入 YouTube 頻道名稱。");

                return;
            }
            else
            {
                if (sharedChannels?.Any(n => n.Name == sharedChannelName) == true)
                {
                    sharedChannelName = string.Empty;

                    await AlertUtil.ShowToast($"YouTube 頻道名稱 \"{sharedChannelName}\" 不可重複。");

                    return;
                }
            }

            if (!string.IsNullOrEmpty(sharedChannelUrl) &&
                !ChannelUrlRegex.IsMatch(sharedChannelUrl))
            {
                sharedChannelUrl = string.Empty;

                await AlertUtil.ShowToast("請輸入有效的 YouTube 頻道網址。");

                return;
            }

            if (sharedChannels?.Any(n => n.Url == sharedChannelUrl) == true)
            {
                string message = "YouTube 頻道網址不可重複。";

                ChannelData? channelData = sharedChannels.FirstOrDefault(n => n.Url == sharedChannelUrl);

                if (channelData != null)
                {
                    message = message.Replace("。", $"，此 YouTube 頻道網址已被 YouTube 頻道 \"{channelData.Name}\" 使用。");
                }

                sharedChannelUrl = string.Empty;

                await AlertUtil.ShowToast(message);

                return;
            }

            if (string.IsNullOrEmpty(sharedChannelName) ||
                string.IsNullOrEmpty(sharedChannelUrl))
            {
                await AlertUtil.ShowToast("請輸入 YouTube 頻道名稱或 YouTube 頻道網址。");

                return;
            }

            sharedChannels?.Add(new ChannelData()
                {
                    Name = sharedChannelName,
                    Url = sharedChannelUrl
                });

            await AlertUtil.ShowToast($"已新增 YouTube 頻道 \"{sharedChannelName}\"。")
                .ContinueWith(async task =>
                {
                    string content = sharedChannels?.ToJsonString() ?? string.Empty;

                    await CustomFunction.SaveToFile(
                        filePath: FileSet.ChannelsJson,
                        content: content);
                })
                .ContinueWith(task =>
                {
                    sharedChannelName = string.Empty;
                    sharedChannelUrl = string.Empty;
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 編輯 YouTube 頻道
    /// </summary>
    /// <param name="inputChannelName">字串，輸入的 YouTube 頻道的名稱</param>
    /// <returns>Task</returns>
    private async Task EditChannel(string? inputChannelName)
    {
        try
        {
            if (string.IsNullOrEmpty(inputChannelName))
            {
                await AlertUtil.ShowToast("編輯 YouTube 頻道失敗，傳入的 YouTube 頻道名稱為空值或 Null。");

                return;
            }

            // 編碼 inputChannelName。
            navigationManager.NavigateTo($"channels/edit/{HttpUtility.UrlEncode(inputChannelName)}");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 刪除 YouTube 頻道
    /// </summary>
    /// <param name="name">字串， YouTube 頻道的名稱</param>
    /// <returns>Task</returns>
    private async Task DeleteChannel(string? name)
    {
        try
        {
            bool? confirm = await AlertUtil.ShowConfirmAlert(
                "刪除 YouTube 頻道",
                "您是否要刪除此 YouTube 頻道？");

            if (confirm == false)
            {
                return;
            }

            if (string.IsNullOrEmpty(name))
            {
                await AlertUtil.ShowToast("YouTube 頻道刪除失敗，YouTube 頻道名稱不得為空。");

                return;
            }

            int? removeCount = sharedChannels?.RemoveAll(n => n.Name == name);


            if (removeCount == null || removeCount == 0)
            {
                await AlertUtil.ShowToast($"YouTube 頻道刪除失敗，找不到對應的 YouTube 頻道：{name}。");

                return;
            }

            await AlertUtil.ShowToast($"已刪除 YouTube 頻道：{name}。")
                .ContinueWith(async task =>
                {
                    if (sharedChannels?.Count > 0)
                    {
                        string content = sharedChannels?.ToJsonString() ?? string.Empty;

                        await CustomFunction.SaveToFile(
                            filePath: FileSet.ChannelsJson,
                            content: content);
                    }
                    else
                    {
                        if (File.Exists(FileSet.ChannelsJson))
                        {
                            File.Delete(FileSet.ChannelsJson);
                        }
                    }
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 匯入 JSON 檔案
    /// </summary>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task ImportJsonFile(CancellationToken ct = default)
    {
        try
        {
            Dictionary<DevicePlatform, IEnumerable<string>> fileTypes = new()
            {
                { DevicePlatform.iOS, new string[] { "public.json" } },
                { DevicePlatform.WinUI, new string[] { ".json" } },
                { DevicePlatform.Tizen, new string[] { "*/*" } },
                { DevicePlatform.tvOS, new string[] { "public.json" } },
                { DevicePlatform.MacCatalyst, new string[] { "public.json" } },
                { DevicePlatform.macOS, new string[] { "public.json" } },
                { DevicePlatform.watchOS, new string[] { "public.json" } },
                { DevicePlatform.Unknown, new string[] { ".json" } },
                { DevicePlatform.Android, new string[] { "application/json" } }
            };

            PickOptions pickOptions = new PickOptions()
                {
                    FileTypes = new FilePickerFileType(fileTypes),
                    PickerTitle = "請選擇 JSON 檔案"
                };

            FileResult? result = await FilePicker.Default.PickAsync(pickOptions);

            if (result != null)
            {
                if (result.FileName.EndsWith("json", StringComparison.OrdinalIgnoreCase))
                {
                    using Stream stream = await result.OpenReadAsync();

                    List<ChannelData>? channels = await JsonSerializer
                        .DeserializeAsync<List<ChannelData>?>(
                            utf8Json: stream,
                            cancellationToken: ct);

                    if (channels != null)
                    {
                        foreach (ChannelData channel in channels)
                        {
                            if (sharedChannels?.Any(n => n.Name == channel.Name &&
                                n.Url == channel.Url) == false)
                            {
                                sharedChannels?.Add(channel);
                            }
                        }

                        string content = sharedChannels?.ToJsonString() ?? string.Empty;

                        await CustomFunction.SaveToFile(
                            filePath: FileSet.ChannelsJson,
                            content: content);
                        await AlertUtil.ShowToast("已匯入 JSON 檔案。");
                    }
                }
                else
                {
                    await AlertUtil.ShowToast("請選擇 JSON 檔案。");
                }
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 匯出 JSON 檔案
    /// </summary>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task ExportJsonFile(CancellationToken ct = default)
    {
        try
        {
            if (sharedChannels?.Any() == false)
            {
                await AlertUtil.ShowToast($"匯出 JSON 檔失敗，請先新增 YouTube 頻道。");

                return;
            }

            string? jsonContent = sharedChannels?.ToJsonString();

            if (string.IsNullOrEmpty(jsonContent))
            {
                await AlertUtil.ShowToast($"匯出 JSON 檔失敗，請先新增 YouTube 頻道。");

                return;
            }

            byte[] bytes = Encoding.UTF8.GetBytes(jsonContent);

            using MemoryStream memoryStream = new(bytes);

            string fileName = $"YTCmtyParser_Channels_{DateTime.Now:yyyyMMddHHmmss}.json";

            FileSaverResult? fileSaverResult = await CustomFunction.GetFileSaverResult(
                fileName: fileName,
                stream: memoryStream,
                cancellationToken: ct);

            fileSaverResult?.EnsureSuccess();

            if (fileSaverResult?.IsSuccessful == true)
            {
                await AlertUtil.ShowToast($"檔案已儲存至：{fileSaverResult.FilePath}");
            }
            else
            {
                string errMsg = fileSaverResult?.Exception?.Message ?? string.Empty;

                await AlertUtil.ShowErrorAlert(errMsg);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 刪除 YouTube 頻道
    /// </summary>
    /// <returns>Task</returns>
    private async Task DeleteChannels()
    {
        try
        {
            bool? confirm = await AlertUtil.ShowConfirmAlert(
                "刪除 YouTube 頻道",
                "您是否要刪除全部的 YouTube 頻道？");

            if (confirm == false)
            {
                return;
            }

            if (sharedChannels?.Any() == false)
            {
                if (File.Exists(FileSet.ChannelsJson))
                {
                    File.Delete(FileSet.ChannelsJson);

                    await AlertUtil.ShowToast($"已刪除檔案：{FileSet.ChannelsJson}。");
                }
                else
                {
                    await AlertUtil.ShowToast("刪除失敗，請先新增 YouTube 頻道。");
                }

                return;
            }

            sharedChannels?.Clear();

            string content = sharedChannels?.ToJsonString() ?? string.Empty;

            await CustomFunction.SaveToFile(
                filePath: FileSet.ChannelsJson,
                content: content);
            await AlertUtil.ShowToast("已刪除全部的 YouTube 頻道。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }
}