@page "/cookies"

@using YTCmtyParser.Commons.Sets;
@using YTCmtyParser.Commons.Utils;

<h1>
    <i class="bi bi-gear" aria-hidden="true"></i>&nbsp;
    設定&nbsp;Cookies
</h1>
<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="mb-2">
                @if (DeviceInfo.Platform == DevicePlatform.WinUI)
                {
                    <div class="form-floating mb-2">
                        <select class="form-select" id="sBrowserType" @bind="@sharedBrowserType" aria-label="網頁瀏覽器">
                            <option value="">
                                - 請選擇 -
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.Brave)">
                                Brave
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.GoogleChrome)">
                                Google Chrome
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.Chromium)">
                                Chromium
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.MicrosoftEdge)">
                                Microsoft Edge
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.Opera)">
                                Opera
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.OperaGX)">
                                Opera GX
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.Vivaldi)">
                                Vivaldi
                            </option>
                            <option value="@nameof(BrowserUtil.BrowserType.MozillaFirefox)">
                                Mozilla Firefox
                            </option>
                        </select>
                        <label for="sBrowserType">網頁瀏覽器</label>
                    </div>
                    <label for="iProfileName" class="form-label">設定檔名稱／路徑</label>
                    <input id="iProfileName" type="text"
                           class="form-control"
                       @bind="sharedProfileName"
                           placeholder="留空以使用預設值"></input>
                }
            </div>
            <div class="mb-2">
                <div class="form-floating">
                    <textarea class="form-control"
                              placeholder="請貼上 cookies.txt 的內容"
                              id="tCookies"
                              style="height: 150px;"
                              @bind="@sharedCookies"
                              @bind:event="oninput"
                              @onchange="async (evt) => await ParseCookies(evt.Value)"></textarea>
                    <label for="tCookies">cookies.txt</label>
                </div>
                @if (DeviceInfo.Platform == DevicePlatform.WinUI)
                {
                    <div class="form-text text-danger">
                        ※當 cookies.txt 欄位有值時，則會優先使用 cookies.txt 欄位的內容。
                    </div>
                }
            </div>
            <div class="mb-2">
                <div class="form-check">
                    <input id="cbUseCookies" class="form-check-input" type="checkbox" @bind="@sharedUseCookies">
                    <label for="cbUseCookies" class="form-check-label">
                        使用 Cookies
                    </label>
                </div>
            </div>
            <div class="text-end mb-2">
                <button class="btn btn-success mb-1"
                        @onclick="async () => await SaveSetting()">
                    <i class="bi bi-save" aria-hidden="true"></i>
                    &nbsp;儲存設定
                </button>
                &nbsp;
                <button class="btn btn-outline-danger mb-1"
                        @onclick="async () => await ClearSetting()">
                    <i class="bi bi-arrow-clockwise" aria-hidden="true"></i>
                    &nbsp;重設
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    // 變數。
    private string? sharedBrowserType = string.Empty;
    private string? sharedProfileName = string.Empty;
    private string? sharedCookies = string.Empty;
    private bool? sharedUseCookies = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPrefs();

        await Task.CompletedTask;
    }

    /// <summary>
    /// 載入設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task LoadPrefs()
    {
        try
        {
            bool hasBrowserType = PreferencesUtil.HasKey(KeySet.BrowserType);
            bool hasProfileName = PreferencesUtil.HasKey(KeySet.ProfileName);
            bool hasCookies = PreferencesUtil.HasKey(KeySet.Cookies);
            bool hasUseCookies = PreferencesUtil.HasKey(KeySet.UseCookies);

            sharedBrowserType = hasBrowserType ?
                PreferencesUtil.GetStringValue(KeySet.BrowserType) :
                string.Empty;

            sharedProfileName = hasProfileName ?
                PreferencesUtil.GetStringValue(KeySet.ProfileName) :
                string.Empty;

            sharedCookies = hasCookies ?
                PreferencesUtil.GetStringValue(KeySet.Cookies) :
                string.Empty;

            sharedUseCookies = hasUseCookies ?
                PreferencesUtil.GetBooleanValue(KeySet.UseCookies) :
                false;
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 儲存設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task SaveSetting()
    {
        try
        {
            if (PreferencesUtil.GetStringValue(KeySet.BrowserType) != sharedBrowserType)
            {
                PreferencesUtil.SetValue(KeySet.BrowserType, sharedBrowserType);
            }

            if (PreferencesUtil.GetStringValue(KeySet.ProfileName) != sharedProfileName)
            {
                PreferencesUtil.SetValue(KeySet.ProfileName, sharedProfileName);
            }

            if (PreferencesUtil.GetStringValue(KeySet.Cookies) != sharedCookies)
            {
                PreferencesUtil.SetValue(KeySet.Cookies, sharedCookies);
            }

            if (PreferencesUtil.GetBooleanValue(KeySet.UseCookies) != sharedUseCookies)
            {
                PreferencesUtil.SetValue(KeySet.UseCookies, sharedUseCookies);
            }

            await AlertUtil.ShowToast("已儲存 Cookies 設定。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 清除設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task ClearSetting()
    {
        try
        {
            bool? confirm = await AlertUtil.ShowConfirmAlert(
                "重設設定",
                "您是否要重設設定？");

            if (confirm == false)
            {
                return;
            }

            PreferencesUtil.RemoveKey(KeySet.BrowserType);
            PreferencesUtil.RemoveKey(KeySet.ProfileName);
            PreferencesUtil.RemoveKey(KeySet.Cookies);
            PreferencesUtil.RemoveKey(KeySet.UseCookies);

            await LoadPrefs();

            await AlertUtil.ShowToast("已清除 Cookies 設定。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 解析 cookies.txt 的內容
    /// </summary>
    /// <param name="inputValue">object</param>
    /// <returns>Task</returns>
    public async Task ParseCookies(object? inputValue)
    {
        try
        {
            string? textContent = inputValue?.ToString();

            if (string.IsNullOrEmpty(textContent))
            {
                return;
            }

            string[] lines = textContent.Split(
                Environment.NewLine.ToCharArray(),
                StringSplitOptions.RemoveEmptyEntries);

            List<string> listCookies = new();

            foreach (string line in lines)
            {
                // TODO: 2023-04-19 待確認是否正確。
                // Ref: https://stackoverflow.com/q/15788341
                //string[] cookie = line.Split('\t');
                string[] cookie = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                string domainName = cookie[0];

                if (domainName == ".youtube.com")
                {
                    string name = cookie[5];
                    string value = cookie[6];

                    listCookies.Add($"{name}={value}");
                }
            }

            // 當為空白時，則 Cookies 解析失敗。
            sharedCookies = string.Join(";", listCookies);

            if (string.IsNullOrEmpty(sharedCookies))
            {
                await AlertUtil.ShowToast("cookies.txt 內容解析失敗。");
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }
}