@page "/webhooks"

@using CommunityToolkit.Maui.Storage;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using YTApi.Commons.Models;
@using YTCmtyParser.Commons.Extensions;
@using YTCmtyParser.Commons.Utils;
@using YTCmtyParser.Data;

<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="mb-2">
                <label for="iWebhookName" class="form-label">Webhook 名稱</label>
                <input id="iWebhookName" type="text"
                       class="form-control"
                       @bind="sharedWebhookName"
                       placeholder="名稱"></input>
            </div>
            <div class="mb-2">
                <label for="iWebhookUrl" class="form-label">Webhook 網址</label>
                <input id="iWebhookUrl" type="url"
                       class="form-control"
                       @bind="sharedWebhookUrl"
                       placeholder="網址"></input>
                <div class="form-text text-danger">
                    ※只支援 Discord "文字頻道" 的 Webhook 網址。
                </div>
            </div>
            <div class="text-end mb-2">
                <button class="btn btn-primary mb-1"
                        @onclick="async () => await AddWebhook()">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    &nbsp;新增 Webhook
                </button>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="table-primary text-secondary">
                    <th scope="col">#</th>
                    <th scope="col">頻道名稱</th>
                    <th scope="col">Webhook 網址</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (sharedWebhooks?.Any() == true)
                {
                    @foreach (WebhookData webhookData in sharedWebhooks)
                    {
                        <tr>
                            <th scope="row">
                                <button class="btn btn-outline-danger btn-sm mb-1"
                                @onclick="async () => await DeleteWebhook(webhookData.Name)">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                    &nbsp;刪除
                                </button>
                            </th>
                            <td>@webhookData.Name</td>
                            <td style="white-space: pre-wrap; line-break: anywhere;">@webhookData.Url</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <th scope="row" class="text-center" colspan="3">無資料</th>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    // 來源：https://github.com/discord-net/Discord.Net/blob/dev/src/Discord.Net.Webhook/DiscordWebhookClient.cs#L52
    private static Regex WebhookUrlRegex = new Regex(
        @"^.*(discord|discordapp)\.com\/api\/webhooks\/([\d]+)\/([a-z0-9_-]+)$",
        RegexOptions.Compiled |
        RegexOptions.IgnoreCase |
        RegexOptions.CultureInvariant);

    // 變數。
    private string? sharedWebhookName = string.Empty;
    private string? sharedWebhookUrl = string.Empty;
    private List<WebhookData>? sharedWebhooks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPrefs();

        await Task.CompletedTask;
    }

    /// <summary>
    /// 載入設定
    /// </summary>
    /// <returns>Task</returns>
    private async Task LoadPrefs()
    {
        try
        {
            if (File.Exists(GlobalSet.Files.WebhooksJson))
            {
                using FileStream fileStream = File.OpenRead(GlobalSet.Files.WebhooksJson);

                sharedWebhooks = await JsonSerializer
                    .DeserializeAsync<List<WebhookData>>(fileStream);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 新增 Webhook
    /// </summary>
    /// <returns>Task</returns>
    private async Task AddWebhook()
    {
        try
        {
            if (string.IsNullOrEmpty(sharedWebhookName))
            {
                sharedWebhookName = string.Empty;

                await AlertUtil.ShowToast("請輸入 Webhook 名稱。");

                return;
            }
            else
            {
                if (sharedWebhooks?.Any(n => n.Name == sharedWebhookName) == true)
                {
                    sharedWebhookName = string.Empty;

                    await AlertUtil.ShowToast($"Webhook 名稱 \"{sharedWebhookName}\" 不可重複。");

                    return;
                }
            }

            if (!string.IsNullOrEmpty(sharedWebhookUrl) &&
                !WebhookUrlRegex.IsMatch(sharedWebhookUrl))
            {
                sharedWebhookUrl = string.Empty;

                await AlertUtil.ShowToast("請輸入有效的 Webhook 網址。");

                return;
            }

            if (sharedWebhooks?.Any(n => n.Url == sharedWebhookUrl) == true)
            {
                string message = "Webhook 網址不可重複。";

                WebhookData? webhookData = sharedWebhooks.FirstOrDefault(n => n.Url == sharedWebhookUrl);

                if (webhookData != null)
                {
                    message = message.Replace("。", $"，此 Webhook 網址已被 Webhook \"{webhookData.Name}\" 使用。");
                }

                sharedWebhookUrl = string.Empty;

                await AlertUtil.ShowToast(message);

                return;
            }

            if (string.IsNullOrEmpty(sharedWebhookName) ||
                string.IsNullOrEmpty(sharedWebhookUrl))
            {
                await AlertUtil.ShowToast("請輸 Webhook 名稱或 Webhook 網址。");

                return;
            }

            sharedWebhooks?.Add(new WebhookData()
                {
                    Name = sharedWebhookName,
                    Url = sharedWebhookUrl
                });

            await AlertUtil.ShowToast($"已新增 Webhook \"{sharedWebhookName}\"。")
                .ContinueWith(async task =>
                {
                    string content = sharedWebhooks?.ToJsonString() ?? string.Empty;

                    await SaveToFile(
                        filePath: GlobalSet.Files.WebhooksJson,
                        content: content);
                })
                .ContinueWith(task =>
                {
                    sharedWebhookName = string.Empty;
                    sharedWebhookUrl = string.Empty;
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 刪除 Webhook
    /// </summary>
    /// <param name="name">字串，Webhook 的名稱</param>
    /// <returns>Task</returns>
    private async Task DeleteWebhook(string? name)
    {
        try
        {
            bool? confirm = await AlertUtil.ShowConfirmAlert(
                "刪除 Webhook",
                "您是否要刪除此 Webhook？");

            if (confirm == false)
            {
                return;
            }

            if (string.IsNullOrEmpty(name))
            {
                await AlertUtil.ShowToast("Webhook 刪除失敗，Webhook 名稱不得為空。");

                return;
            }

            int? removeCount = sharedWebhooks?.RemoveAll(n => n.Name == name);


            if (removeCount == null || removeCount == 0)
            {
                await AlertUtil.ShowToast($"Webhook 刪除失敗，找不到對應的 Webhook：{name}。");

                return;
            }

            await AlertUtil.ShowToast($"已刪除 Webhook：{name}。")
                .ContinueWith(async task =>
                {
                    if (sharedWebhooks?.Count > 0)
                    {
                        string content = sharedWebhooks?.ToJsonString() ?? string.Empty;

                        await SaveToFile(
                            filePath: GlobalSet.Files.WebhooksJson,
                            content: content);
                    }
                    else
                    {
                        if (File.Exists(GlobalSet.Files.WebhooksJson))
                        {
                            File.Delete(GlobalSet.Files.WebhooksJson);
                        }
                    }
                });
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 儲存檔案
    /// </summary>
    /// <param name="filePath">字串，檔案路徑</param>
    /// <param name="content">字串，文字內容</param>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task SaveToFile(
        string filePath,
        string content,
        CancellationToken ct = default)
    {
        try
        {
            if (string.IsNullOrEmpty(filePath))
            {
                await AlertUtil.ShowToast($"檔案路徑不得為空。", ct);

                return;
            }

            string fileName = Path.GetFileName(filePath);

            using FileStream fileStream = File.OpenWrite(filePath);
            using StreamWriter streamWriter = new(fileStream);

            await streamWriter.WriteAsync(content);

            await AlertUtil.ShowToast($"檔案 {fileName} 已儲存至：{filePath}。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }
}