@page "/"

@using System.Text.Json;
@using CommunityToolkit.Maui.Alerts;
@using CommunityToolkit.Maui.Storage;
@using System.Text;
@using System.Security.Cryptography;
@using YTApi.Commons.Models;
@using YTApi.Commons;
@using YTCmtyParser.Commons.Extensions;
@using YTCmtyParser.Commons.Utils;
@using YTCmtyParser.Commons;
@using static YTCmtyParser.Commons.Utils.BrowserUtil;
@using YTCmtyParser.Data;
@using Microsoft.Maui.Controls;
@inject IHttpClientFactory httpClientFactory;
@inject YTCmtyService ytCmtyService;

<h1>獲取 YouTube 社群貼文</h1>
<div class="card mb-2">
    <div class="card-body">
        <div class="col-12">
            <div class="row">
                <div class="mb-2">
                    <label for="iYtChUrl" class="form-label">YouTube 頻道網址</label>
                    <input id="iYtChUrl" type="url"
                           class="form-control"
                           @bind="urlYtCh"
                           placeholder="YouTube 頻道網址"></input>
                </div>
                <div class="mb-2">
                    <button class="btn btn-primary mb-1"
                            @onclick="async () => await FetchInitialPosts(urlYtCh)"
                            disabled="@isBtnFetchLatestPostsDisabled">
                        <span class="oi oi-cloud-download" aria-hidden="true"></span>
                        &nbsp;
                        獲取最新的社群貼文
                    </button>
                    &nbsp;
                    <button class="btn btn-outline-secondary mb-1"
                            @onclick="async () => await FetchOlderPosts()"
                            disabled="@isBtnFetchOlderPostsDisabled">
                        <span class="oi oi-cloud-download" aria-hidden="true"></span>
                        &nbsp;
                        獲取先前的社群貼文
                    </button>
                    &nbsp;
                    <button class="btn btn-outline-warning mb-1"
                            @onclick="async () => await FetchRestPosts()"
                            disabled="@isBtnFetchRestPostsDisabled">
                        <span class="oi oi-cloud-download" aria-hidden="true"></span>
                        &nbsp;
                        獲取全部的社群貼文
                    </button>
                </div>
                <div>
                    <button class="btn btn-outline-primary mb-1"
                            @onclick="async () => await ImportJsonFile()"
                            disabled="@isBtnImportJsonFileDisabled">
                        <span class="oi oi-data-transfer-upload" aria-hidden="true"></span>
                        &nbsp;
                        載入 JSON 檔案
                    </button>
                    &nbsp;
                    <button class="btn btn-outline-danger mb-1"
                            @onclick="Reset"
                            disabled="@isBtnResetDisabled">
                        <span class="oi oi-action-undo" aria-hidden="true"></span>
                        &nbsp;
                        重設
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
@{
    @if (sharedPostDatas.Any())
    {
        <div class="col-12">
            <div class="card mb-2">
                <div class="card-body">
                    <div class="col-12">
                        <div class="row">
                            <div class="col">
                                <button class="btn btn-outline-success mb-1"
                                    @onclick="async () => await ExportJsonFile()">
                                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                                    &nbsp;
                                    匯出 JSON 檔案
                                </button>
                                &nbsp;
                                <button class="btn btn-outline-info mb-1"
                                    @onclick="async () => await SendPostsToDiscord()">
                                    <span class="oi oi-cloud-upload" aria-hidden="true"></span>
                                    &nbsp;
                                    傳送貼文至 Discord
                                </button>
                            </div>
                            <div class="col text-end">
                                已獲取的貼文數量：
                                <span class="text-info">
                                    @sharedPostDatas.Count
                                </span>
                                <br />
                                已選取的貼文數量：
                                <span class="text-warning">
                                    @sharedPostDatas.Where(n => n.IsChecked).Count()
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-2">
                <div class="form-check">
                    <label for="cbSelectAll" class="form-check-label">全選貼文</label>&nbsp;
                    <input id="cbSelectAll"
                       type="checkbox"
                       class="form-check-input"
                       @bind="isCBCheckAllChecked"
                       @bind:event="oninput"
                       @onchange="(evt) => DoCheckAllClicked(evt.Value)" />
                </div>
            </div>
            <div>
                @foreach (PostData postData in sharedPostDatas)
                {
                    string whoCanSee = postData.IsSponsorsOnly ? "頻道會員專屬" : "所有頻道會員";

                    <div class="card text-white bg-dark border-danger mb-2">
                        <div class="card-header">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-md-6 text-start" style="vertical-align: middle;">
                                        <div>
                                            <input type="checkbox" class="checkbox"
                                           @bind="@postData.IsChecked"
                                           @bind:event="oninput"
                                           @onchange="(evt) => DoPostDataCheckboxClicked(postData.PostID, evt.Value)" />
                                            &nbsp;
                                            [@whoCanSee]
                                        </div>
                                        <div>
                                            貼文 ID：
                                            <a class="card-link"
                                               href="@postData.Url"
                                               target="_blank">@postData.PostID</a>
                                        </div>
                                        <div class="text-muted">
                                            <span class="oi oi-calendar" aria-hidden="true"></span>
                                            &nbsp;
                                            @postData.PublishedTimeText?.TrimStart().TrimEnd()&nbsp;
                                            <span class="oi oi-heart" aria-hidden="true"></span>
                                            &nbsp;
                                            @postData.VoteCount?.TrimStart().TrimEnd()
                                        </div>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <a href="@postData.AuthorThumbnailUrl" target="_blank">
                                            <img class="img-thumbnail"
                                                 src="@postData.AuthorThumbnailUrl"
                                                 alt="@postData.AuthorText">
                                        </a>
                                        &nbsp;
                                        @postData.AuthorText
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="col-12 text-start">
                                <button class="btn btn-outline-light mb-1"
                                @onclick="async () => await SendPostToDiscord(postData.PostID)">
                                    <span class="oi oi-cloud-upload" aria-hidden="true"></span>
                                    &nbsp;
                                    傳送至 Discord
                                </button>
                                &nbsp;
                                <button class="btn btn-outline-light mb-1"
                                @onclick="async () => await ExportJsonFile(postData.PostID)">
                                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                                    &nbsp;
                                    匯出 JSON 檔案
                                </button>
                            </div>
                            <hr />
                            @if (postData.ContentTexts?.Any() == true)
                            {
                                @foreach (RunData runData in postData.ContentTexts)
                                {
                                    <div style="white-space: pre-wrap; line-break: anywhere;">
                                        @if (runData.IsLink)
                                        {
                                            <a class="card-link" href="@runData.Url" target="_blank">@runData.Text</a>
                                        }
                                        else
                                        {
                                            @runData.Text
                                        }
                                    </div>
                                }
                            }
                        </div>
                        @if (postData.Attachments?.Any() == true)
                        {
                            int idx = 1;

                            @foreach (AttachmentData attachmentData in postData.Attachments)
                            {
                                @if (attachmentData.IsVideo)
                                {
                                    VideoData? videoData = attachmentData.VideoData;

                                    <a href="@videoData?.ThumbnailUrl" target="_blank">
                                        <img class="card-img-top" src="@videoData?.ThumbnailUrl" alt="影片的預覽圖">
                                    </a>
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <a class="card-link" href="@videoData?.Url" target="_blank">@videoData?.Title</a>
                                        </h5>
                                        <h6 class="card-subtitle mb-2 text-muted">
                                            <span class="oi oi-person" aria-hidden="true"></span>
                                            &nbsp;
                                            @videoData?.OwnerText?.TrimStart().TrimEnd()
                                        </h6>
                                        <p class="card-text">
                                            <span class="oi oi-calendar" aria-hidden="true"></span>
                                            &nbsp;
                                            @videoData?.PublishedTimeText?.TrimStart().TrimEnd()
                                        </p>
                                        <p class="card-text">
                                            <span class="oi oi-timer" aria-hidden="true"></span>
                                            &nbsp;
                                            @videoData?.LengthText?.TrimStart().TrimEnd()
                                        </p>
                                        <p class="card-text">
                                            <span class="oi oi-info" aria-hidden="true"></span>
                                            &nbsp;簡述：
                                        </p>
                                        <div style="white-space: pre-wrap; line-break: anywhere;">
                                            @videoData?.DescriptionSnippet?.TrimStart().TrimEnd()
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <a href="@attachmentData.Url" target="_blank">
                                        <img class="card-img-bottom" src="@attachmentData.Url" alt="附件 @idx">
                                    </a>
                                }

                                idx++;
                            }
                        }
                        <div class="card-footer text-muted">
                            <span class="oi oi-link-intact" aria-hidden="true"></span>
                            &nbsp;
                            <a class="card-link"
                               href="@postData.Url"
                               target="_blank">@postData.Url</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    // 按鈕的啟用進用控制。
    protected bool isBtnFetchLatestPostsDisabled { get; set; } = false;
    protected bool isBtnFetchOlderPostsDisabled { get; set; } = true;
    protected bool isBtnFetchRestPostsDisabled { get; set; } = true;
    protected bool isBtnImportJsonFileDisabled { get; set; } = false;
    protected bool isBtnResetDisabled { get; set; } = true;
    // Checkbox 的勾選控制。
    protected bool isCBCheckAllChecked { get; set; }

    // 共用變數。
    private YTConfig? sharedYTConfig;
    private string sharedReferer = string.Empty;
    private List<PostData> sharedPostDatas = new();

    // 使用者輸入的值。
    private string? urlYtCh = string.Empty;
    private string urlDCWebhook = string.Empty;

    // 網頁瀏覽器 Cookies。
    private BrowserType browserType = BrowserType.GoogleChrome;
    private string profileName = "";
    private bool useCookies = false;

    /// <summary>
    /// 執行全選貼文 Checkbox 點擊
    /// </summary>
    /// <param name="value">object</param>
    private void DoCheckAllClicked(object? value)
    {
        bool isChecked = Convert.ToBoolean(value);

        foreach (PostData postData in sharedPostDatas)
        {
            postData.IsChecked = isChecked;
        }
    }

    /// <summary>
    /// 執行貼文的 Checkbox 點擊
    /// </summary>
    /// <param name="postID">字串，貼文的 ID</param>
    /// <param name="value">object</param>
    private void DoPostDataCheckboxClicked(string? postID, object? value)
    {
        if (string.IsNullOrEmpty(postID))
        {
            return;
        }

        bool isChecked = Convert.ToBoolean(value);

        PostData? postData = sharedPostDatas.FirstOrDefault(n => n.PostID == postID);

        if (postData != null)
        {
            postData.IsChecked = isChecked;

            if (isCBCheckAllChecked && isChecked == false)
            {
                isCBCheckAllChecked = false;
            }
        }
    }

    /// <summary>
    /// 獲取初始的社群貼文
    /// </summary>
    /// <param name="url">字串，YouTube 頻道網址</param>
    /// <returns>Task</returns>
    private async Task FetchInitialPosts(string url)
    {
        try
        {
            if (string.IsNullOrEmpty(url))
            {
                await AlertUtil.ShowToast("請輸入 YouTube 頻道網址。");

                return;
            }

            string? channelID = await Functions.GetYtChID(url);

            if (string.IsNullOrEmpty(channelID))
            {
                await AlertUtil.ShowToast("無法取得 YouTube 頻道的 ID，請確認您輸入的是正確的YouTube 頻道網址。");

                return;
            }

            using HttpClient httpClient = GetHttpClient();

            InitialData initialData = await ytCmtyService.GetInitialData(
                httpClient: httpClient,
                channelID: channelID,
                cookies: GetCookies());

            sharedReferer = initialData.Referer ?? string.Empty;

            sharedYTConfig = initialData.ConfigData;

            List<PostData> initialPosts = ytCmtyService.GetInitialPosts(
                jsonElement: initialData.JsonData,
                ytConfig: sharedYTConfig);

            if (initialPosts.Any())
            {
                // 當有已有貼文資料時。（e.g. 載入 JSON 檔案）
                if (sharedPostDatas.Any())
                {
                    // 反向排序 initialPosts。
                    initialPosts.Reverse();

                    foreach (PostData postData in initialPosts)
                    {
                        if (!sharedPostDatas.Any(n => n.PostID == postData.PostID))
                        {
                            sharedPostDatas.Insert(0, postData);
                        }
                    }
                }
                else
                {
                    foreach (PostData postData in initialPosts)
                    {
                        if (!sharedPostDatas.Any(n => n.PostID == postData.PostID))
                        {
                            sharedPostDatas.Add(postData);
                        }
                    }
                }

                isBtnFetchLatestPostsDisabled = true;
                isBtnFetchOlderPostsDisabled = false;
                isBtnFetchRestPostsDisabled = false;
                isBtnImportJsonFileDisabled = true;
                isBtnResetDisabled = false;
            }
            else
            {
                await AlertUtil.ShowToast("此 YouTube 頻道並無社群貼文可供獲取。");
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 獲取先前的社群貼文
    /// </summary>
    /// <returns>Task</returns>
    private async Task FetchOlderPosts()
    {
        try
        {
            if (string.IsNullOrEmpty(sharedYTConfig?.Continuation))
            {
                isBtnFetchOlderPostsDisabled = true;
                isBtnFetchRestPostsDisabled = true;

                await AlertUtil.ShowToast("無法取得先前的社群貼文。");

                return;
            }

            using HttpClient httpClient = GetHttpClient();

            List<PostData> oldertPosts = await ytCmtyService.GetEarlierPosts(
                httpClient: httpClient,
                ytConfig: sharedYTConfig,
                cookies: GetCookies(),
                referer: sharedReferer);

            if (oldertPosts.Any())
            {
                foreach (PostData postData in oldertPosts)
                {
                    if (!sharedPostDatas.Any(n => n.PostID == postData.PostID))
                    {
                        sharedPostDatas.Add(postData);
                    }
                }
            }
            else
            {
                await AlertUtil.ShowToast("此 YouTube 頻道並無先前的社群貼文可供獲取。");
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 獲取先前的全部社群貼文
    /// </summary>
    /// <returns>Task</returns>
    private async Task FetchRestPosts()
    {
        try
        {
            while (!string.IsNullOrEmpty(sharedYTConfig?.Continuation))
            {
                using HttpClient httpClient = GetHttpClient();

                List<PostData> oldertPosts = await ytCmtyService.GetEarlierPosts(
                    httpClient: httpClient,
                    ytConfig: sharedYTConfig,
                    cookies: GetCookies(),
                    referer: sharedReferer);

                if (oldertPosts.Any())
                {
                    foreach (PostData postData in oldertPosts)
                    {
                        if (!sharedPostDatas.Any(n => n.PostID == postData.PostID))
                        {
                            sharedPostDatas.Add(postData);
                        }
                    }
                }

                await DoEasyDelay();
            }

            if (string.IsNullOrEmpty(sharedYTConfig?.Continuation))
            {
                isBtnFetchOlderPostsDisabled = true;
                isBtnFetchRestPostsDisabled = true;

                await AlertUtil.ShowToast("已取得先前的全部社群貼文。");

                return;
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 重設
    /// </summary>
    private void Reset()
    {
        sharedYTConfig = null;
        sharedReferer = string.Empty;
        sharedPostDatas.Clear();

        isBtnFetchLatestPostsDisabled = false;
        isBtnFetchOlderPostsDisabled = true;
        isBtnFetchRestPostsDisabled = true;
        isBtnImportJsonFileDisabled = false;
        isBtnResetDisabled = true;
        isCBCheckAllChecked = false;
    }

    /// <summary>
    /// 匯入 JSON 檔案
    /// </summary>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task ImportJsonFile(CancellationToken ct = default)
    {
        try
        {
            Dictionary<DevicePlatform, IEnumerable<string>> fileTypes = new()
            {
                { DevicePlatform.iOS, new string[] { "json" } },
                { DevicePlatform.WinUI, new string[] { "json" } },
                { DevicePlatform.Tizen, new string[] { "json" } },
                { DevicePlatform.tvOS, new string[] { "json" } },
                { DevicePlatform.MacCatalyst, new string[] { "json" } },
                { DevicePlatform.macOS, new string[] { "json" } },
                { DevicePlatform.watchOS, new string[] { "json" } },
                { DevicePlatform.Unknown, new string[] { "json" } },
                { DevicePlatform.Android, new string[] { "json" } }
            };

            PickOptions pickOptions = new PickOptions()
                {
                    FileTypes = new FilePickerFileType(fileTypes),
                    PickerTitle = "請選擇 JSON 檔案"
                };

            FileResult? result = await FilePicker.Default.PickAsync(pickOptions);

            if (result != null)
            {
                if (result.FileName.EndsWith("json", StringComparison.OrdinalIgnoreCase))
                {
                    using Stream stream = await result.OpenReadAsync();

                    ExportData? exportData = await JsonSerializer
                        .DeserializeAsync<ExportData?>(
                            utf8Json: stream,
                            cancellationToken: ct);

                    if (exportData != null)
                    {
                        urlYtCh = exportData.Url;

                        if (exportData.PostDatas != null)
                        {
                            sharedPostDatas.Clear();
                            sharedPostDatas.AddRange(exportData.PostDatas);
                        }

                        isBtnResetDisabled = false;

                        await AlertUtil.ShowToast("已匯入 JSON 檔案。");
                    }
                }
                else
                {
                    await AlertUtil.ShowToast("請選擇 JSON 檔案。");
                }
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 匯出 JSON 檔案
    /// </summary>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task ExportJsonFile(CancellationToken ct = default)
    {
        try
        {
            if (!sharedPostDatas.Any())
            {
                await AlertUtil.ShowToast($"匯出 JSON 檔失敗，請先獲取 YouTube 社群貼文。");

                return;
            }

            List<PostData> postDatas = (sharedPostDatas.Any(n => n.IsChecked) ?
                sharedPostDatas.Where(n => n.IsChecked) :
                sharedPostDatas)
                .ToList();

            ExportData exportData = new()
                {
                    Url = urlYtCh,
                    PostDatas = postDatas
                };

            string jsonContent = exportData.ToJsonString();

            byte[] bytes = Encoding.UTF8.GetBytes(jsonContent);

            using MemoryStream memoryStream = new(bytes);

            FileSaverResult fileSaverResult = await FileSaver.Default
                .SaveAsync(
                    fileName: $"YouTube_Community_Posts_{DateTime.Now:yyyyMMddHHmmss}.json",
                    stream: memoryStream,
                    cancellationToken: ct);

            if (fileSaverResult.IsSuccessful)
            {
                await AlertUtil.ShowToast($"檔案已儲存至：{fileSaverResult.FilePath}");
            }
            else
            {
                await AlertUtil.ShowErrorAlert(fileSaverResult.Exception.Message);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 匯出 JSON 檔案
    /// </summary>
    /// <param name="postID">字串，貼文的 ID</param>
    /// <param name="ct">CancellationToken</param>
    /// <returns>Task</returns>
    private async Task ExportJsonFile(string? postID, CancellationToken ct = default)
    {
        try
        {
            if (string.IsNullOrEmpty(postID))
            {
                await AlertUtil.ShowToast($"發生錯誤，無效的貼文 ID：{postID}。");

                return;
            }

            PostData? postData = sharedPostDatas.FirstOrDefault(n => n.PostID == postID);

            if (postData == null)
            {
                await AlertUtil.ShowToast($"發生錯誤，找不到對應的貼文資料，貼文 ID：{postID}。");

                return;
            }

            List<PostData> postDatas = new();

            postDatas.Add(postData);

            ExportData exportData = new()
                {
                    Url = urlYtCh,
                    PostDatas = postDatas
                };

            string jsonContent = exportData.ToJsonString();

            byte[] bytes = Encoding.UTF8.GetBytes(jsonContent);

            using MemoryStream memoryStream = new(bytes);

            FileSaverResult fileSaverResult = await FileSaver.Default
                .SaveAsync(
                    fileName: $"YouTube_Community_Post_{postID}_{DateTime.Now:yyyyMMddHHmmss}.json",
                    stream: memoryStream,
                    cancellationToken: ct);

            if (fileSaverResult.IsSuccessful)
            {
                await AlertUtil.ShowToast($"檔案已儲存至：{fileSaverResult.FilePath}");
            }
            else
            {
                await AlertUtil.ShowErrorAlert(fileSaverResult.Exception.Message);
            }
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 傳送貼文至 Discord
    /// </summary>
    /// <returns>Task</returns>
    private async Task SendPostsToDiscord()
    {
        try
        {
            IEnumerable<PostData> selectedPostDatas = sharedPostDatas.Where(n => n.IsChecked);

            if (!selectedPostDatas.Any())
            {
                await AlertUtil.ShowToast("請先勾選要傳送至 Discord 文字頻道的貼文。");

                return;
            }

            string? urlDCWebhook = PreferencesUtil.GetStringValue(GlobalSet.Keys.UrlDCWebhook);

            if (string.IsNullOrEmpty(urlDCWebhook))
            {
                await AlertUtil.ShowToast("請先至設定畫面設定 Discord Webhook 網址。");

                return;
            }

            foreach (PostData postData in selectedPostDatas)
            {
                await DiscordUtil.SendToDiscord(postData, urlDCWebhook)
                    .ContinueWith(async task => await DoEasyDelay());
            }

            await AlertUtil.ShowToast("已傳送貼文至 Discord 文字頻道。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 傳送貼文至 Discord
    /// </summary>
    /// <param name="postID">字串，貼文的 ID</param>
    /// <returns>Task</returns>
    private async Task SendPostToDiscord(string? postID)
    {
        try
        {
            if (string.IsNullOrEmpty(postID))
            {
                await AlertUtil.ShowToast($"發生錯誤，無效的貼文 ID：{postID}。");

                return;
            }

            PostData? postData = sharedPostDatas.FirstOrDefault(n => n.PostID == postID);

            if (postData == null)
            {
                await AlertUtil.ShowToast($"發生錯誤，找不到對應的貼文資料，貼文 ID：{postID}。");

                return;
            }

            string? urlDCWebhook = PreferencesUtil.GetStringValue(GlobalSet.Keys.UrlDCWebhook);

            if (string.IsNullOrEmpty(urlDCWebhook))
            {
                await AlertUtil.ShowToast("請先至設定畫面設定 Discord Webhook 網址。");

                return;
            }

            await DiscordUtil.SendToDiscord(postData, urlDCWebhook);

            await AlertUtil.ShowToast("已傳送貼文至 Discord 文字頻道。");
        }
        catch (Exception ex)
        {
            await AlertUtil.ShowErrorAlert(ex.Message);
        }
    }

    /// <summary>
    /// 執行簡易延遲
    /// </summary>
    /// <returns>Task</returns>
    private async Task DoEasyDelay()
    {
        // 簡易的隨機減速機制。
        int delayMs = RandomNumberGenerator.GetInt32(500, 1500);

        await Task.Delay(delayMs);
    }

    /// <summary>
    /// 取得 HttpClient
    /// </summary>
    /// <returns>HttpClient</returns>
    private HttpClient GetHttpClient()
    {
        return HttpClientUtil.GetHttpClient(
            httpClientFactory: httpClientFactory,
            userAgent: Commons.Sets.StringSet.UserAgent);
    }

    /// <summary>
    /// 取得 Cookies 字串
    /// </summary>
    /// <returns>字串</returns>
    private string GetCookies()
    {
        string cookies = string.Empty;

        if (useCookies)
        {
            List<BrowserUtil.Cookie> listCookies = BrowserUtil.GetCookies(
                browser: browserType,
                profileName: profileName,
                hostKey: ".youtube.com");

            cookies = string.Join(";", listCookies.Select(n => $"{n.Name}={n.Value}"));
        }

        return cookies;
    }
}